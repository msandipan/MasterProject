Number of epochs to train  1 gpu0
Start Train Script
The task:  Histologischer Subtyp  Classes:  ['Klassisch', 'DesmoNodlaer']
Image path-- /home/Mukherjee/MBlst/new_data_sets/4000
------------ Classes -------------
Number of Unique Patients 162
Number of patches all 2793
Label Frequency of patches:  [1598 1195]
Label Frequency of images given patients:  [104  58]
number of different patietns 162
Number of different Patients in Data Set 162
Patient Id [3, 6, 11, 12, 13, 15, 16, 21, 22, 28, 31, 34, 37, 38, 39, 41, 42, 46, 50, 53, 56, 58, 60, 63, 64, 71, 74, 77, 78, 79, 81, 84, 86, 87, 89, 90, 91, 93, 94, 101, 102, 103, 104, 105, 107, 108, 109, 110, 111, 112, 113, 117, 118, 119, 121, 124, 126, 131, 134, 139, 140, 143, 145, 149, 151, 157, 158, 159, 162, 164, 167, 168, 170, 171, 172, 176, 178, 179, 180, 182, 187, 188, 190, 191, 193, 194, 195, 197, 200, 201, 204, 205, 208, 209, 210, 213, 214, 216, 221, 222, 224, 227, 229, 230, 232, 238, 244, 245, 248, 249, 254, 256, 257, 258, 259, 261, 263, 270, 271, 273, 274, 275, 277, 280, 282, 284, 286, 287, 291, 292, 295, 297, 299, 302, 304, 306, 307, 309, 310, 314, 318, 320, 321, 322, 324, 325, 326, 328, 330, 334, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 351] 162
175
162
After Split Config
Checking for GPU
True
 USING GPUs [0]
Evaluating on validation set during training.
Loaded pretrained weights for efficientnet-b0
Loaded pretrained weights for efficientnet-b5
/home/Mukherjee/anaconda3/envs/Mproject/lib/python3.7/site-packages/torchvision/models/_utils.py:209: UserWarning: The parameter 'pretrained' is deprecated since 0.13 and will be removed in 0.15, please use 'weights' instead.
  f"The parameter '{pretrained_param}' is deprecated since 0.13 and will be removed in 0.15, "
/home/Mukherjee/anaconda3/envs/Mproject/lib/python3.7/site-packages/torchvision/models/_utils.py:223: UserWarning: Arguments other than a weight enum or `None` for 'weights' are deprecated since 0.13 and will be removed in 0.15. The current behavior is equivalent to passing `weights=None`.
  warnings.warn(msg)
print the devices cuda:0
cuda:0
Loading old model
Load old 1
Current class weights [1.57446809 2.74074074]
Current class weights with extra [1.57446809 2.74074074]
Dataset Train 148ta: |█████████████████████████████████████████████████-| 99.3% Complete
Dataset Val 344
**** Batch Size ;;: 10 [0]
The Model is  efficientnet_b0
******---*** MODEL LOADED TO GPU/CPU *****---***
Train all Weights
Number of training Parameters 4666495
model_type efficientnet_b0
GPU available: True (cuda), used: True
TPU available: False, using: 0 TPU cores
IPU available: False, using: 0 IPUs
HPU available: False, using: 0 HPUs
Epoch 0:   0%|                                                                                                                                                        | 0/14 [00:00<?, ?it/s]
/home/Mukherjee/anaconda3/envs/Mproject/lib/python3.7/site-packages/pytorch_lightning/callbacks/model_checkpoint.py:616: UserWarning: Checkpoint directory /home/Mukherjee/ProjectFiles/MasterProject/Base/models/_Experiment_Name_s2new/CVSet0 exists and is not empty.
  rank_zero_warn(f"Checkpoint directory {dirpath} exists and is not empty.")
LOCAL_RANK: 0 - CUDA_VISIBLE_DEVICES: [0]
  | Name | Type | Params
------------------------------
------------------------------
0         Trainable params
0         Non-trainable params
0         Total params
Epoch 0:   0%|                                                                                                                                                        | 0/14 [00:00<?, ?it/s]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-3.8932, -1.4985,  0.0000,  ...,  0.0000, -4.8144, -2.2186],
         [-3.9502,  0.0000, -2.4560,  ..., -2.6422, -5.8297,  0.0000],
         [-4.6114, -1.8313,  0.0000,  ..., -3.2157, -5.6584, -4.2680],
         [-1.7025, -3.8555, -3.5690,  ..., -2.8952, -4.5742, -4.5529]],
        [[-2.7225, -1.5873, -2.7976,  ..., -2.5448, -2.7084,  0.0000],
         [-4.1173, -2.6830, -3.4183,  ..., -3.7343, -4.8170, -3.0066],
         [ 0.0000,  0.0000, -2.3508,  ...,  0.0000, -4.0757,  0.0000],
         [-1.9242, -1.2982, -4.5427,  ..., -3.5139, -2.8088, -2.5562]],
        [[ 0.0000, -4.9568, -2.2937,  ...,  0.0000,  0.0000, -2.3887],
         [-3.3466, -0.6456, -5.5852,  ...,  0.0000, -2.7351, -3.5512],
         [-3.6692,  0.0000, -3.9264,  ...,  0.5598,  0.0000,  0.0000],
         [-4.8044,  0.4931, -4.8409,  ...,  0.7601, -2.7980, -1.4720]],
        ...,
        [[-1.6191, -1.8485, -1.4667,  ..., -3.0478, -0.0783, -1.5478],
         [-3.3319, -1.2456, -1.5404,  ...,  0.0000,  1.3083,  0.0376],
         [-2.1121, -1.0849, -2.7651,  ..., -5.0169,  0.0929, -0.2741],
         [-2.8070, -0.5957, -1.4731,  ..., -4.4000,  0.8397, -0.5962]],
        [[-1.6303, -1.9011,  0.0000,  ..., -1.9741, -1.2449, -1.8979],
         [ 0.0000, -5.7892, -3.7663,  ..., -2.2809, -2.9557, -1.4206],
         [-1.9609, -2.5922, -2.8038,  ..., -2.6426, -1.7806,  0.0000],
         [-3.2823, -4.3843, -2.0102,  ..., -4.9471, -3.4107, -2.3205]],
        [[ 0.0000,  0.0000, -3.2834,  ..., -1.7422, -0.9330, -1.4532],
         [-3.9665, -5.2096, -1.7577,  ..., -2.4640, -3.6532, -0.6532],
         [-1.5213,  0.0000, -2.1294,  ...,  0.0000, -0.4264, -0.7786],
         [ 0.0000, -4.1289, -3.5728,  ..., -3.4079, -2.9561, -1.9013]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.5836, 0.4569]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.8179, 0.3967]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.2006, 0.2558]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.7589, 0.5432]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.8024, 0.0951]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.3044, 0.5111]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.6497, 0.3438]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.8467, 0.1944]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.7194, 0.3321]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.6839, 0.2391]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0146, -0.0012,  0.0158,  ...,  0.0167, -0.0184,  0.0209],
        [-0.0030, -0.0127,  0.0022,  ..., -0.0123, -0.0179, -0.0149]],
       device='cuda:0', requires_grad=True)
/home/Mukherjee/anaconda3/envs/Mproject/lib/python3.7/site-packages/pytorch_lightning/trainer/connectors/logger_connector/result.py:233: UserWarning: You called `self.log('ensemble_count', ...)` in your `training_step` but the value needs to be floating point. Converting it to torch.float32.
  f"You called `self.log({self.meta.name!r}, ...)` in your `{self.meta.fx}` but the value needs to"
Epoch 0:   7%|████████▋                                                                                                                 | 1/14 [00:18<03:54, 18.04s/it, loss=0.715, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[ 0.0000, -3.9416,  0.0000,  ..., -2.9902,  0.0000, -2.9352],
         [ 0.0000, -2.8062, -3.0606,  ..., -3.4598, -3.9490, -1.5392],
         [-4.9997, -4.7377, -5.6469,  ..., -3.1818, -4.9051, -1.1329],
         [-3.8883, -4.4045, -3.6557,  ..., -4.3808,  0.0000,  0.0000]],
        [[-3.4452, -1.7409, -3.7952,  ..., -3.7781, -2.0538,  0.0000],
         [-2.3888, -2.7444, -1.9613,  ...,  0.0000, -1.3954,  0.0000],
         [-2.9442, -1.5758,  0.0000,  ..., -2.2248, -2.9498, -0.2237],
         [-2.7202,  0.0000, -4.3978,  ..., -1.8665, -2.8755, -0.4508]],
        [[ 0.0000, -1.0917, -1.7556,  ..., -4.0614,  0.0000, -0.9811],
         [-5.8890, -1.0928,  0.0000,  ..., -4.4888, -5.5757, -1.7532],
         [-2.9280, -2.7724, -3.1152,  ..., -5.6692,  0.0000,  0.0000],
         [-5.0362,  0.0000, -2.5022,  ..., -5.7089, -7.0876, -3.2104]],
        ...,
        [[ 0.0000, -2.7433, -3.0583,  ..., -4.2132, -2.8402, -0.5042],
         [-2.8625,  0.0000, -1.9910,  ..., -6.2367,  0.0000, -3.1564],
         [-1.4970, -1.8471, -2.4580,  ..., -3.3117, -3.2422,  0.0000],
         [-3.8445, -0.9797,  0.0000,  ..., -3.3769, -1.7119, -1.6648]],
        [[-1.1452, -2.9774,  0.0000,  ..., -1.7076,  0.2352, -1.0736],
         [-1.4038,  0.0000, -1.6547,  ..., -4.2634, -0.5846, -2.4243],
         [-3.8962, -4.6682,  0.0000,  ..., -2.1724,  0.0227, -1.9717],
         [-1.8204, -2.7373,  0.0000,  ..., -1.1527, -0.8496, -0.9056]],
        [[-0.9790, -3.4176,  0.0000,  ..., -2.6549, -1.7329, -1.0688],
         [-3.5208, -3.2701, -1.9009,  ..., -0.0786, -1.1951,  0.0963],
         [-2.7724, -3.0004, -1.8531,  ..., -1.4721,  0.0000, -1.3950],
         [-1.9023, -3.0278, -2.5563,  ...,  0.5202, -0.3094, -0.2166]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.5382, 0.1575]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.7962, 0.7388]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.8258, 0.4326]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.5924, 0.5991]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.4652, 0.0942]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.4890, 0.3691]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.6560, 0.0663]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.4916, 0.4156]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.5788, 0.2317]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.4965, 0.3556]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0145, -0.0013,  0.0159,  ...,  0.0168, -0.0185,  0.0210],
        [-0.0029, -0.0126,  0.0021,  ..., -0.0124, -0.0178, -0.0150]],
       device='cuda:0', requires_grad=True)
Epoch 0:  14%|█████████████████▍                                                                                                        | 2/14 [00:19<01:54,  9.52s/it, loss=0.666, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-5.3172,  0.0000, -4.4939,  ...,  0.0000, -3.5569,  0.0000],
         [-2.7228, -4.4170, -2.5372,  ..., -5.2536, -3.8395, -1.5245],
         [-0.4251, -2.3522,  0.0000,  ..., -1.3612,  0.0000,  0.0000],
         [-2.5822, -3.0028, -2.5619,  ...,  0.0000, -0.3434,  0.0000]],
        [[ 0.0000,  0.0000, -1.8897,  ..., -4.8301,  0.0000, -3.3407],
         [-1.7326, -3.7461,  0.0000,  ..., -4.5895, -5.4968, -2.0948],
         [-2.9399, -7.1002,  0.0000,  ...,  0.0000, -5.9037, -1.0685],
         [-2.9384, -3.3075, -4.9692,  ...,  0.0000, -5.5888, -3.2179]],
        [[ 0.4810, -0.4611,  0.0000,  ..., -1.7339, -2.8799,  0.0400],
         [-1.4194, -0.3069, -4.2941,  ..., -1.8085, -4.1062, -0.7163],
         [ 0.0000, -1.5477,  0.0000,  ..., -1.0819, -3.9104, -2.6229],
         [-2.4678,  1.0595, -5.0546,  ..., -2.0150, -2.6650, -0.8845]],
        ...,
        [[-4.0468,  0.0000, -4.3387,  ..., -3.2291, -2.4552, -0.7162],
         [-3.0631, -2.9662,  0.0000,  ..., -0.8846, -1.8203,  1.1812],
         [-3.1251, -1.6453, -2.5615,  ..., -2.1829, -3.1559,  0.8358],
         [-4.5299, -1.9844, -5.3179,  ..., -1.5694, -3.9486,  0.1548]],
        [[-3.2149,  0.0000,  0.0000,  ..., -2.0594,  0.0000, -0.8287],
         [-3.9020, -2.9823, -0.3164,  ..., -2.1639, -0.7379, -1.9785],
         [-4.9709, -2.8575,  0.0000,  ...,  0.0000, -2.7123,  0.0000],
         [-3.5182,  0.0000, -0.1322,  ..., -0.8954, -0.2995, -0.1189]],
        [[-3.0773, -4.0259, -2.3352,  ..., -2.8655,  0.0000, -2.7305],
         [-5.8157, -3.6606, -1.7383,  ...,  0.0000, -2.0799, -2.6813],
         [-3.6963, -3.7960, -1.1566,  ..., -4.4969, -4.0768, -3.2980],
         [-4.9576, -3.7603, -2.6942,  ..., -5.3252,  0.0000, -2.1806]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.6832, 0.2955]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.3632, 0.4366]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.6823, 0.5912]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.3916, 0.5165]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.7692, 0.4323]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.5930, 0.3634]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.8810, 0.7165]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.6881, 0.1240]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.8782, 0.3298]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.7702, 0.6541]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0144, -0.0014,  0.0160,  ...,  0.0168, -0.0185,  0.0210],
        [-0.0028, -0.0125,  0.0021,  ..., -0.0124, -0.0178, -0.0150]],
       device='cuda:0', requires_grad=True)
Epoch 0:  21%|██████████████████████████▏                                                                                               | 3/14 [00:19<01:12,  6.63s/it, loss=0.679, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[ 0.0000, -6.1848, -3.0134,  ..., -2.4040, -2.7560,  0.0000],
         [-4.3176, -5.7925, -2.0083,  ..., -1.8750, -4.4950,  0.0000],
         [-2.1813, -5.9832,  0.0000,  ..., -1.8808, -4.9548, -0.5137],
         [-2.9864, -5.6759, -3.3639,  ..., -2.2071, -5.8079,  0.0000]],
        [[-3.0617, -2.3633, -2.7402,  ..., -2.0489, -2.3285, -1.2179],
         [-1.7762, -5.4990, -0.7167,  ..., -3.4400, -1.2227, -1.6291],
         [-3.4007, -3.5943, -2.4702,  ..., -4.5348, -2.8227, -1.1063],
         [-2.0593, -3.4649,  0.0000,  ..., -2.8910, -1.6971, -2.4250]],
        [[-3.8682,  0.0000, -0.7873,  ..., -3.3941, -0.9627, -3.4215],
         [-1.3979, -2.5178, -1.9392,  ..., -4.3714, -0.7857, -4.9761],
         [-0.5936, -2.2342, -0.5316,  ..., -1.6073,  0.0000,  0.0000],
         [-2.6851, -3.0451,  0.2115,  ..., -2.6927,  0.8941,  0.0000]],
        ...,
        [[-3.1610, -3.7445,  0.0000,  ..., -5.9845,  0.0000,  0.0000],
         [ 0.0000, -4.1458, -2.5391,  ..., -6.8000, -5.1191,  0.0000],
         [ 0.0000, -2.5953, -4.4142,  ..., -0.9505,  0.0000,  0.0000],
         [-3.0184,  0.0000,  0.0000,  ..., -2.9446, -1.2072, -3.7243]],
        [[-4.9626,  0.0000, -3.0000,  ..., -3.0392, -3.1910, -1.6173],
         [ 0.0000, -2.9316, -2.2939,  ..., -3.1959, -4.6534, -1.5361],
         [ 0.0000, -2.3287, -2.8904,  ...,  0.0000, -3.6662, -2.0641],
         [-3.3770, -0.7669, -3.8831,  ...,  0.0000, -3.6158, -1.0127]],
        [[-2.4004,  0.0000,  0.0000,  ..., -3.4489,  0.0000,  0.0000],
         [ 0.0000,  0.0000,  0.0000,  ..., -3.8800,  0.0000, -1.6569],
         [-1.7431,  0.0000, -0.3447,  ...,  0.0000, -4.0784, -1.2498],
         [-2.1207, -2.1665, -2.3993,  ..., -0.9058,  0.0000, -1.4672]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.7616, 0.2723]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.3692, 0.3442]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.7443, 0.0800]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.9634, 0.6405]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.7155, 0.8608]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.4247, 0.5514]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.8834, 0.2755]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.5358, 0.8080]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.6878, 0.7155]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.7160, 0.3965]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0143, -0.0015,  0.0160,  ...,  0.0168, -0.0185,  0.0210],
        [-0.0027, -0.0124,  0.0021,  ..., -0.0124, -0.0178, -0.0150]],
       device='cuda:0', requires_grad=True)
11  tensor([[0.7565, 0.3861]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])                                          | 4/14 [00:20<00:51,  5.19s/it, loss=0.703, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-8.2819, -5.1714, -4.7209,  ..., -6.5664, -3.9840, -5.2518],
         [ 0.0000,  0.0000, -1.6259,  ..., -5.2480,  0.4394, -2.1757],
         [-2.6800,  0.0000, -4.3741,  ..., -2.0983,  1.0715, -0.5913],
         [-4.0115, -2.2480, -2.9274,  ...,  0.0000,  0.0000,  0.0000]],
        [[ 0.0000, -3.9505,  0.0000,  ..., -1.1391, -2.1721, -0.5256],
         [-3.2430,  0.0000, -1.3863,  ...,  0.0000, -2.8660,  0.0000],
         [-2.5517,  0.0000, -1.0644,  ...,  0.0000, -4.4376, -1.2005],
         [-2.9375, -1.5913, -2.1431,  ..., -2.5973, -2.7480, -1.8401]],
        [[ 0.0000, -1.7288, -0.3171,  ..., -3.0019,  0.0000, -3.9400],
         [ 0.0000, -3.1638, -2.9325,  ..., -4.1321, -4.2573, -2.9699],
         [-2.2887, -3.9843,  0.0000,  ..., -0.9458, -4.6009,  0.0000],
         [-3.9269,  0.0000,  0.0000,  ..., -1.5100, -3.3845, -0.1915]],
        ...,
        [[-1.3092, -5.7808, -1.9820,  ..., -3.2678,  0.0000, -2.1698],
         [-3.9284,  0.0000, -2.0414,  ..., -1.1743, -3.9388, -2.8067],
         [-2.1224,  0.0000, -2.7141,  ..., -3.4460, -3.6159, -3.9528],
         [ 0.0000, -2.0411, -1.7068,  ..., -2.5639, -4.8223, -2.6020]],
        [[-1.8693, -2.6562, -5.3262,  ..., -0.1213, -2.2373, -3.8037],
         [ 0.0000,  0.0000, -7.9428,  ..., -1.3386, -3.5261,  0.0000],
         [-0.9025, -3.0501, -4.3754,  ..., -2.3339, -1.7590, -5.2622],
         [-1.8845, -1.7100, -5.0966,  ..., -4.2378, -5.4718,  0.0000]],
        [[-0.8781, -5.1035,  0.8249,  ..., -2.9594, -1.2155, -0.3485],
         [-0.5910,  0.0000, -2.3817,  ..., -4.3012, -0.9057, -1.8948],
         [-1.9281, -0.7455, -3.1586,  ..., -2.9534,  0.0000,  0.0955],
         [-1.8956, -2.9232, -1.6310,  ..., -4.6907, -2.5921, -2.1532]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.7848, 0.3978]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.5355, 0.4785]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.6239, 0.3970]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.4389, 0.8592]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.8115, 0.4668]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.8643, 0.4662]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.7298, 0.2575]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.6554, 0.2477]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.5574, 0.2206]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.3316, 0.4353]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0142, -0.0015,  0.0160,  ...,  0.0168, -0.0185,  0.0211],
        [-0.0027, -0.0123,  0.0020,  ..., -0.0124, -0.0178, -0.0151]],
       device='cuda:0', requires_grad=True)
Epoch 0:  36%|███████████████████████████████████████████▌                                                                              | 5/14 [00:32<00:58,  6.46s/it, loss=0.706, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-3.9109e+00, -4.1426e+00,  0.0000e+00,  ..., -1.7085e+00,
          -5.6244e+00, -7.4393e-01],
         [-2.1688e+00, -1.4066e+00, -2.9796e+00,  ..., -4.7775e-01,
          -2.7487e+00, -5.4334e-01],
         [ 0.0000e+00, -4.2348e+00, -4.1573e+00,  ...,  0.0000e+00,
          -6.3010e+00,  1.7793e-01],
         [-3.4716e+00, -3.1981e+00, -3.3095e+00,  ..., -5.8424e+00,
           0.0000e+00,  1.4606e-01]],
        [[-4.1600e+00,  0.0000e+00, -3.0278e+00,  ..., -4.1924e+00,
          -1.1444e+00,  2.1438e+00],
         [-3.2224e+00, -1.3092e+00, -1.3523e+00,  ..., -3.6376e+00,
          -2.0799e+00, -8.0750e-01],
         [ 0.0000e+00, -2.8790e-01,  0.0000e+00,  ...,  0.0000e+00,
          -1.0909e+00,  1.1786e+00],
         [ 0.0000e+00, -1.6685e+00, -2.1143e+00,  ..., -4.1695e-01,
          -6.0221e-01, -4.0479e-03]],
        [[-2.1710e+00,  0.0000e+00,  0.0000e+00,  ...,  1.4595e-01,
          -2.4794e+00, -3.2357e+00],
         [-1.9267e+00, -3.2394e+00, -1.4911e+00,  ...,  0.0000e+00,
          -1.1629e+00, -4.1723e+00],
         [-3.0007e+00, -4.1499e+00, -3.9935e+00,  ...,  0.0000e+00,
          -1.7813e+00,  0.0000e+00],
         [-3.8601e+00, -3.7367e+00, -4.2518e+00,  ..., -1.4986e+00,
          -2.4564e+00, -4.7753e+00]],
        ...,
        [[-6.8605e+00, -2.8508e+00,  0.0000e+00,  ..., -3.0760e+00,
          -4.1836e+00,  0.0000e+00],
         [-3.6690e+00, -3.5219e+00, -1.9728e+00,  ..., -3.4732e+00,
          -1.2958e+00, -3.5074e+00],
         [-7.2696e+00, -3.6884e+00, -1.9053e+00,  ..., -5.5289e+00,
          -2.8021e+00, -5.1303e+00],
         [-2.8000e+00, -4.6032e+00, -2.1112e+00,  ...,  0.0000e+00,
          -1.9899e+00,  0.0000e+00]],
        [[-3.9112e+00, -2.2765e+00, -1.8922e+00,  ..., -4.9458e+00,
          -3.9100e+00, -2.8488e+00],
         [ 0.0000e+00, -4.0771e+00, -6.0920e-01,  ..., -2.4333e+00,
           0.0000e+00, -3.7334e+00],
         [-3.7086e+00, -2.9116e+00, -1.5605e+00,  ..., -3.0242e+00,
           0.0000e+00, -3.1408e+00],
         [ 0.0000e+00, -4.8287e+00, -4.2123e-01,  ..., -2.6213e+00,
           0.0000e+00, -2.4657e+00]],
        [[ 0.0000e+00, -3.7435e+00, -3.1982e+00,  ..., -3.9883e+00,
          -2.4770e+00, -2.1518e+00],
         [-1.8052e+00, -4.5358e+00, -1.6217e+00,  ..., -4.5707e+00,
          -2.8526e+00, -3.6100e+00],
         [-1.2813e+00, -4.0502e+00,  0.0000e+00,  ..., -2.1348e+00,
           0.0000e+00, -1.9697e+00],
         [-3.5755e+00, -5.1095e+00, -2.1849e+00,  ..., -2.9472e+00,
          -2.7276e+00, -3.4771e+00]]], device='cuda:0',
       grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.7565, 0.3861]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])                                          | 4/14 [00:20<00:51,  5.19s/it, loss=0.703, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
10  1 torch.Size([1, 1280])
11  tensor([[0.9305, 0.6960]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.5981, 0.3782]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.8045, 0.0544]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.4251, 0.3972]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.6459, 0.3406]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.1100, 0.6931]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.7299, 0.0671]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.6292, 0.5633]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.4137, 0.6861]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0142, -0.0015,  0.0160,  ...,  0.0168, -0.0185,  0.0211],
        [-0.0027, -0.0123,  0.0020,  ..., -0.0124, -0.0178, -0.0151]],
       device='cuda:0', requires_grad=True)
Epoch 0:  43%|████████████████████████████████████████████████████▋                                                                      | 6/14 [00:33<00:44,  5.55s/it, loss=0.69, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-4.0763e+00, -4.7210e+00,  0.0000e+00,  ..., -2.6420e+00,
          -2.6510e+00, -3.8692e+00],
         [-3.8066e+00, -3.6654e+00, -3.0509e+00,  ...,  0.0000e+00,
          -2.2677e+00, -1.6086e+00],
         [-5.0305e+00,  0.0000e+00, -2.9473e+00,  ..., -5.4097e-03,
          -2.4853e+00,  0.0000e+00],
         [-2.5573e+00, -5.3778e+00, -3.2078e+00,  ...,  0.0000e+00,
          -3.1257e+00, -2.1747e+00]],
        [[-2.3237e+00, -1.8127e+00, -1.7943e+00,  ..., -2.8888e+00,
          -1.5369e+00, -3.8225e-01],
         [-1.4924e+00,  0.0000e+00,  5.3608e-01,  ...,  0.0000e+00,
           0.0000e+00, -7.2678e-01],
         [-1.1284e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
           0.0000e+00, -9.0814e-01],
         [-1.7140e+00, -3.0487e+00,  0.0000e+00,  ..., -5.2285e+00,
          -3.2195e+00, -1.0387e+00]],
        [[-4.7631e+00, -4.8499e-01, -2.6896e+00,  ..., -1.6796e+00,
           2.1861e+00, -8.3418e-01],
         [-1.3246e+00,  2.0483e-01, -3.1468e+00,  ..., -4.0428e+00,
           0.0000e+00, -7.8079e-01],
         [-2.8832e+00, -1.7072e+00,  0.0000e+00,  ..., -2.1541e+00,
           3.0948e+00,  0.0000e+00],
         [-1.2324e+00,  1.3326e+00, -1.3689e+00,  ..., -9.6838e-01,
           0.0000e+00, -2.4486e+00]],
        ...,
        [[-2.5654e+00, -4.4036e+00, -1.3597e+00,  ..., -9.8177e-01,
          -1.7925e+00,  0.0000e+00],
         [-2.6926e+00,  0.0000e+00, -8.7060e-01,  ..., -2.7409e+00,
           0.0000e+00,  1.9000e-02],
         [-3.4118e+00, -3.0860e+00, -2.7308e+00,  ..., -2.5152e+00,
          -4.7725e+00, -6.2218e-01],
         [-2.5894e+00, -2.4010e+00, -2.0201e+00,  ..., -2.4422e+00,
          -2.6345e+00,  3.7781e-01]],
        [[-2.3970e+00, -2.5064e+00, -2.0116e+00,  ..., -6.6421e+00,
           0.0000e+00, -9.1766e-01],
         [-4.0903e+00,  0.0000e+00, -4.4684e+00,  ..., -1.5775e+00,
          -4.1265e+00, -1.0056e+00],
         [-5.2498e+00,  9.2078e-02, -4.1772e+00,  ...,  0.0000e+00,
          -3.3963e+00, -2.9424e+00],
         [-4.0934e+00,  0.0000e+00, -2.7134e+00,  ..., -2.7263e+00,
          -5.1634e+00, -2.5032e+00]],
        [[-2.8440e+00, -4.1539e+00, -2.2915e+00,  ..., -3.2436e+00,
          -2.9691e+00, -1.3640e+00],
         [ 0.0000e+00,  0.0000e+00, -4.1001e+00,  ..., -2.0226e+00,
           0.0000e+00,  0.0000e+00],
         [-3.9562e+00, -2.2187e+00, -4.7666e+00,  ..., -3.9408e+00,
          -4.7835e+00,  0.0000e+00],
         [ 0.0000e+00, -2.6005e+00, -1.5399e+00,  ...,  0.0000e+00,
          -1.9178e+00,  3.8121e-01]]], device='cuda:0',
       grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.8698, 0.1903]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.2340, 0.5634]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.8297, 0.3355]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.4973, 0.1648]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.7634, 0.2401]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.5202, 0.2894]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.4362, 0.3829]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.8589, 0.4131]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.3193, 0.2346]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.9124, 0.2455]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0142, -0.0016,  0.0160,  ...,  0.0168, -0.0185,  0.0211],
        [-0.0027, -0.0123,  0.0020,  ..., -0.0124, -0.0178, -0.0151]],
       device='cuda:0', requires_grad=True)
Epoch 0:  50%|█████████████████████████████████████████████████████████████                                                             | 7/14 [00:34<00:34,  4.89s/it, loss=0.676, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[ 0.0000,  0.0000,  0.0000,  ..., -1.5586,  1.2717, -1.9430],
         [-2.6913,  0.0000,  0.0000,  ..., -2.2618, -1.3981,  0.0000],
         [-4.2424, -4.7664,  0.0000,  ..., -1.0603,  0.0000,  0.0000],
         [-2.0635, -2.6288,  0.0000,  ..., -1.5299, -2.0704, -1.2256]],
        [[-4.1380, -3.2081, -3.4624,  ..., -7.7128, -0.8022, -2.6030],
         [-2.8875, -2.4041, -0.8610,  ..., -4.5678, -1.6329, -1.7142],
         [-3.1692,  0.5426, -2.9073,  ..., -3.9669, -3.2990, -3.2944],
         [ 0.0000, -0.7857,  0.0000,  ..., -2.9046, -1.5123, -2.6041]],
        [[ 1.7128, -5.1822,  0.0000,  ...,  0.0000, -0.9942, -1.3573],
         [ 0.4928,  0.0000,  0.0000,  ..., -0.3460,  0.5056, -1.2675],
         [-0.1338, -2.5508, -0.9515,  ..., -1.4136, -2.3533, -0.5977],
         [ 1.2665, -4.4517, -3.1553,  ...,  0.0522, -2.0356,  0.0000]],
        ...,
        [[-2.2506,  0.0000,  0.0000,  ..., -3.5502, -0.8675, -1.6904],
         [-6.2822, -1.9929, -0.0131,  ..., -3.5862,  0.0000,  0.0000],
         [-6.7328,  0.0000, -2.7924,  ...,  0.0000, -3.8787, -0.8962],
         [-5.6883, -1.3448, -2.3000,  ..., -4.0497,  0.0000, -1.7508]],
        [[ 0.0000, -1.0300, -2.8632,  ..., -3.5928,  0.0000, -2.6599],
         [ 0.0000, -2.9193, -1.9569,  ...,  0.0000,  0.0000, -3.3007],
         [-3.0537, -2.8819, -3.3255,  ..., -3.0804, -3.6895,  0.0000],
         [-2.3848,  0.0000, -4.5177,  ..., -4.0789,  0.0000, -2.5868]],
        [[-3.5638, -4.7154, -4.2599,  ..., -3.6098,  0.0000,  0.0000],
         [ 0.0000, -3.6155, -4.7674,  ..., -4.9470,  0.0000, -4.8195],
         [-3.0930, -3.3948, -3.1191,  ...,  0.0000, -0.9026, -4.8660],
         [ 0.0000, -3.9306, -4.9965,  ...,  0.0000, -2.4628,  0.0000]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.8349, 0.1203]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.3560, 0.5769]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.7127, 0.4759]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.4327, 0.2997]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.7422, 0.2533]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.7789, 0.2787]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.7289, 0.2760]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.7094, 0.5934]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.7519, 0.2293]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.3915, 0.1613]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0141, -0.0016,  0.0160,  ...,  0.0168, -0.0185,  0.0211],
        [-0.0026, -0.0122,  0.0020,  ..., -0.0123, -0.0178, -0.0151]],
       device='cuda:0', requires_grad=True)
Epoch 0:  57%|█████████████████████████████████████████████████████████████████████▋                                                    | 8/14 [00:35<00:26,  4.40s/it, loss=0.679, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-0.8104, -0.2590, -3.2771,  ..., -1.7128, -0.1003, -1.5127],
         [ 0.0000,  0.0000,  0.0000,  ...,  0.0000, -1.2376,  0.4054],
         [ 0.0000,  0.0000, -2.2961,  ..., -3.4717, -1.0523, -1.7303],
         [ 0.0000, -2.1014,  0.0000,  ..., -2.3411,  0.0000,  0.0000]],
        [[-3.0055, -0.3244, -3.4179,  ..., -3.0557, -2.3655,  0.0000],
         [-3.6807,  1.4404, -5.2989,  ...,  0.0000, -2.8681,  0.0000],
         [ 0.0000, -0.4075, -3.9081,  ..., -2.8780,  0.0000, -1.6147],
         [-2.5822,  0.0000,  0.0000,  ..., -4.3373, -3.9338, -0.6426]],
        [[ 0.0000, -3.6116, -4.0277,  ..., -1.4138,  0.0000, -3.2043],
         [ 1.4261,  0.0639, -5.6155,  ..., -0.3136, -2.5975,  0.0000],
         [-3.1684, -2.2579, -5.8661,  ..., -1.9191, -1.6751, -3.4386],
         [-0.6272, -2.9050, -4.1359,  ..., -2.4743, -1.5414, -3.4423]],
        ...,
        [[-2.0134, -4.0050, -2.8058,  ...,  0.0000, -3.5045, -0.6714],
         [-3.9203, -3.5415, -3.5800,  ..., -5.8638, -6.4012,  0.7657],
         [-4.2237, -2.9853, -2.6181,  ...,  0.0000, -4.1612, -0.1122],
         [-2.2378, -4.5066, -2.5120,  ..., -1.4962, -3.0596, -1.0551]],
        [[-2.2189, -3.0824,  0.0000,  ..., -3.5134, -2.7502, -1.6217],
         [-3.9086, -1.3355, -2.1368,  ..., -3.0348, -4.5412, -2.0952],
         [-2.5400, -1.5911, -1.7600,  ..., -3.6644, -4.0359, -1.4290],
         [-4.1685,  0.0000, -1.4181,  ..., -4.7994, -4.1803, -2.0429]],
        [[-7.5446, -5.6265, -1.3396,  ..., -6.0940, -6.1740, -4.5205],
         [-4.7238, -3.3292,  0.0000,  ...,  0.0000,  0.0000, -2.8184],
         [-3.3482,  0.0000, -0.6114,  ..., -2.2545, -1.6557,  0.0000],
         [ 0.0000, -4.2791,  0.0000,  ..., -2.0265, -2.3115, -1.3659]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.5721, 0.8832]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.6163, 0.4522]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.7502, 0.6567]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.6615, 0.3241]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.7201, 0.5069]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.6253, 0.6402]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.7883, 0.6702]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.3088, 0.5529]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.6340, 0.2066]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.5995, 0.0790]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0141, -0.0015,  0.0160,  ...,  0.0168, -0.0185,  0.0211],
        [-0.0027, -0.0122,  0.0020,  ..., -0.0124, -0.0178, -0.0151]],
       device='cuda:0', requires_grad=True)
Epoch 0:  64%|██████████████████████████████████████████████████████████████████████████████▍                                           | 9/14 [00:45<00:25,  5.10s/it, loss=0.685, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[ 0.0000e+00, -4.0964e+00,  8.3751e-01,  ..., -2.7975e+00,
          -1.8617e+00,  0.0000e+00],
         [ 0.0000e+00, -2.4642e+00, -1.2558e+00,  ..., -2.8925e+00,
          -2.7560e+00, -2.5287e+00],
         [-2.7304e-02, -2.7603e+00, -7.5144e-01,  ..., -2.9393e+00,
          -3.0527e+00, -1.7610e+00],
         [-9.3759e-01, -1.7589e+00, -1.0009e+00,  ..., -1.9526e+00,
           0.0000e+00,  0.0000e+00]],
        [[-4.6309e+00, -4.3242e+00, -3.7180e+00,  ..., -1.9044e+00,
          -3.5141e+00, -7.6244e-01],
         [-3.6664e+00, -3.6269e+00, -3.7426e+00,  ...,  0.0000e+00,
          -3.4634e+00,  7.8891e-02],
         [ 0.0000e+00,  0.0000e+00, -2.9969e+00,  ..., -6.0432e+00,
          -4.4301e+00, -1.7687e+00],
         [-4.2014e+00,  0.0000e+00, -3.1423e+00,  ..., -4.2924e+00,
           0.0000e+00,  0.0000e+00]],
        [[ 0.0000e+00, -1.0436e+00, -2.5044e+00,  ...,  0.0000e+00,
          -2.1494e+00,  0.0000e+00],
         [-2.3342e+00,  0.0000e+00, -3.1949e+00,  ..., -4.7439e-01,
           0.0000e+00, -1.1716e+00],
         [-3.7512e+00,  0.0000e+00,  0.0000e+00,  ..., -9.4741e-01,
          -5.0273e-01, -1.8944e+00],
         [-5.3912e+00, -2.3560e+00, -4.7211e+00,  ..., -2.0546e+00,
          -2.7149e+00, -1.8860e+00]],
        ...,
        [[-3.9740e+00,  2.3481e-01,  0.0000e+00,  ..., -1.2257e-04,
          -3.6149e+00,  0.0000e+00],
         [-4.2897e+00,  1.1985e+00, -4.1764e+00,  ..., -9.4210e-01,
           0.0000e+00, -2.3167e+00],
         [-3.6104e+00, -3.7043e-01, -3.8978e+00,  ..., -3.4785e+00,
          -3.2976e+00, -2.3359e+00],
         [-4.0575e+00,  0.0000e+00, -2.6876e+00,  ..., -3.6249e+00,
          -4.5185e+00, -1.5822e+00]],
        [[-2.1084e+00, -3.8447e+00, -4.1531e-01,  ..., -6.4155e+00,
          -3.5321e+00, -1.4739e+00],
         [-1.7224e+00, -5.0280e+00, -1.9800e+00,  ..., -3.6815e+00,
          -1.4770e+00,  2.4102e+00],
         [-2.6979e+00,  0.0000e+00, -4.4535e-01,  ...,  0.0000e+00,
           0.0000e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00, -7.3819e-01,  ..., -1.6143e+00,
           6.9161e-01,  9.6013e-01]],
        [[-4.8950e+00, -6.2929e+00, -1.2668e+00,  ..., -3.7954e+00,
          -5.8862e+00, -8.8386e-01],
         [-2.8390e+00, -2.6925e+00,  1.7855e+00,  ..., -3.7928e+00,
           0.0000e+00,  0.0000e+00],
         [ 0.0000e+00, -2.9913e+00, -5.2231e-01,  ..., -2.8792e+00,
           0.0000e+00,  0.0000e+00],
         [ 1.2749e-01, -3.9075e+00,  1.0147e-01,  ..., -2.2079e+00,
          -1.1687e+00, -3.2396e-01]]], device='cuda:0',
       grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.6285, 0.2798]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.4503, 0.5618]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.7435, 0.3146]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.6620, 0.5978]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.4679, 0.4064]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.2565, 0.7902]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.8068, 0.7326]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.4203, 0.5039]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.3761, 0.1560]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.5542, 0.5421]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0141, -0.0015,  0.0161,  ...,  0.0169, -0.0185,  0.0212],
        [-0.0027, -0.0122,  0.0020,  ..., -0.0124, -0.0178, -0.0151]],
       device='cuda:0', requires_grad=True)
Epoch 0:  71%|██████████████████████████████████████████████████████████████████████████████████████▍                                  | 10/14 [00:46<00:18,  4.66s/it, loss=0.684, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[ 0.0000, -3.2998,  0.2514,  ..., -2.8543, -1.5587, -0.5990],
         [-3.7861, -4.0510,  0.0000,  ..., -1.2550, -0.7379, -1.4579],
         [ 0.0000, -5.7223,  1.1143,  ..., -1.3933,  0.0000, -0.4691],
         [-2.6506, -4.6783, -1.7735,  ..., -1.7675, -2.7878,  0.0000]],
        [[-1.7326, -5.7911,  0.0000,  ..., -5.9561, -1.3470, -1.2025],
         [-0.8151, -5.7600, -1.7320,  ..., -3.6015,  0.1103, -0.6382],
         [-4.6630, -3.6196, -1.3332,  ..., -4.1509, -1.3362,  0.3489],
         [-0.8691, -4.1932, -2.0099,  ..., -2.0578,  0.0000,  0.0000]],
        [[-2.9002, -1.3056, -4.2264,  ..., -1.8009,  0.0000, -1.0602],
         [-4.7003, -1.4944, -2.7792,  ...,  0.0000, -4.8577, -2.7547],
         [ 0.0000,  0.5525, -4.7547,  ..., -0.8032,  0.0000, -0.4183],
         [-3.7532, -0.7224, -5.8512,  ..., -0.3390, -4.0545, -1.9826]],
        ...,
        [[-3.2893, -4.2433, -2.9424,  ..., -3.2179, -5.4641,  0.0000],
         [-3.6055, -5.7739, -1.5045,  ..., -0.4741, -2.6349, -1.5617],
         [-2.2834, -3.1246,  0.0000,  ..., -4.1906, -3.1819, -3.3075],
         [-2.7503, -3.2238, -4.1388,  ..., -3.1173, -3.7756,  0.3645]],
        [[-1.6708, -0.7555, -3.8676,  ..., -0.9115, -2.5916, -0.6895],
         [-3.0267,  0.8771, -1.5700,  ..., -4.7466, -1.5462, -1.5767],
         [-1.0952,  0.0000, -5.8550,  ..., -2.3410,  0.0000, -0.8290],
         [-3.8326,  0.0308, -3.4953,  ..., -1.4984, -2.1724, -0.5083]],
        [[ 0.0000, -2.0599, -2.3366,  ..., -0.3783, -0.8751, -2.1835],
         [-1.8469,  0.0000, -3.3693,  ..., -4.9519, -1.4888,  0.1774],
         [-1.9339, -2.6330,  0.0000,  ...,  0.0000, -2.3723, -2.3785],
         [-1.4106,  0.0000, -2.5401,  ..., -1.7639, -0.7582, -1.8771]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.6228, 0.1533]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.7376, 0.7340]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.7045, 0.6910]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.5649, 0.5358]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.3853, 0.0804]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.3940, 0.2644]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.3171, 0.7973]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.7259, 0.2759]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.2452, 0.6681]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.7895, 0.8275]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0142, -0.0015,  0.0161,  ...,  0.0169, -0.0184,  0.0212],
        [-0.0027, -0.0122,  0.0020,  ..., -0.0124, -0.0179, -0.0152]],
       device='cuda:0', requires_grad=True)
Epoch 0:  79%|███████████████████████████████████████████████████████████████████████████████████████████████                          | 11/14 [00:47<00:12,  4.30s/it, loss=0.688, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-2.5629, -3.9206, -7.1870,  ..., -1.0255, -3.3525, -0.9689],
         [-3.9898, -5.1924, -5.3657,  ...,  0.0000, -4.3833,  0.0000],
         [-2.9594, -1.1714, -3.7199,  ..., -3.0722, -3.4052, -0.8413],
         [-4.1569, -0.6892, -3.5783,  ..., -3.5430, -4.3891,  1.3628]],
        [[-1.7278,  0.0487, -2.7244,  ...,  0.0000, -1.3092, -2.5770],
         [ 0.0000,  0.0000, -1.0914,  ..., -2.7840,  0.6454, -1.0354],
         [-1.5666,  0.0000, -3.8084,  ...,  0.0000, -3.6311, -4.3333],
         [-5.2906, -5.0424, -1.5764,  ..., -4.2650, -2.0804, -3.4487]],
        [[-4.1848, -2.6720, -2.6467,  ..., -1.1669, -4.0828, -2.8492],
         [-2.6606, -3.0984, -3.3762,  ..., -1.8792, -4.6673,  0.0000],
         [ 0.0000, -1.2871, -3.2738,  ..., -4.2685, -5.1493,  0.0000],
         [-5.2622, -2.5160,  0.0000,  ..., -1.7651, -5.6552, -0.7124]],
        ...,
        [[-2.8558, -1.9663, -3.2926,  ..., -3.1101, -3.6430, -1.2752],
         [-1.5546, -3.7418, -2.9828,  ..., -2.8663, -2.5827,  0.9743],
         [ 0.0000, -2.9901, -1.9739,  ...,  0.0000,  0.0000, -0.7932],
         [-4.9983, -4.1665,  0.0000,  ..., -5.0743, -2.3800, -1.5095]],
        [[-4.1148, -2.6116, -1.2551,  ..., -3.4570,  0.0000,  0.0000],
         [ 0.0000, -2.5962,  0.0000,  ..., -2.5797, -1.9024, -0.2504],
         [-1.5625,  0.0000, -0.9131,  ...,  0.0000, -2.9683, -0.8898],
         [-3.9581, -2.7552,  0.0000,  ..., -2.3373, -2.9828, -0.7310]],
        [[-1.1688,  0.0000, -0.8673,  ..., -4.9256, -2.7158, -3.4095],
         [ 0.0000,  0.0000, -2.2665,  ..., -4.7772, -2.9537, -3.8958],
         [-1.9546,  0.0000, -1.5588,  ..., -5.6066,  0.0000,  0.0000],
         [-4.1473, -4.2198, -2.7289,  ..., -7.9384, -4.8964, -5.4144]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.7513, 0.4571]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.8940, 0.2926]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.6431, 0.8268]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.6317, 0.3926]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.4197, 0.8388]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.4381, 0.3137]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.2894, 0.8010]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.4027, 0.6684]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.5881, 0.1899]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.7322, 0.5753]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0142, -0.0015,  0.0161,  ...,  0.0170, -0.0183,  0.0213],
        [-0.0027, -0.0123,  0.0020,  ..., -0.0125, -0.0179, -0.0152]],
       device='cuda:0', requires_grad=True)
Epoch 0:  86%|███████████████████████████████████████████████████████████████████████████████████████████████████████▋                 | 12/14 [00:47<00:07,  3.99s/it, loss=0.689, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-2.7516, -1.0005, -1.5876,  ..., -3.5651, -4.4305, -3.4249],
         [-3.5894,  0.0000, -3.3146,  ..., -2.7392, -3.1525, -3.7035],
         [-1.4810,  0.0000, -4.1579,  ...,  0.0000, -0.5246, -3.3827],
         [-2.2995, -2.1538, -4.0858,  ...,  0.0000,  0.0000, -1.6770]],
        [[-2.2906, -3.3711, -3.0377,  ..., -6.1036, -5.7259, -3.9906],
         [ 0.0000, -2.7024, -3.5710,  ..., -3.1172,  0.0000, -1.8920],
         [ 0.0000, -1.8508, -3.9405,  ..., -4.0354, -6.4330, -4.1029],
         [-4.4628,  0.0000, -6.0850,  ..., -4.4363, -6.7209, -2.7082]],
        [[ 0.0000,  0.0000, -1.4166,  ..., -4.6664,  0.0000, -0.7517],
         [-1.1379, -1.2467,  0.0000,  ..., -3.1707, -3.2921,  0.3413],
         [-1.0456,  0.0000,  0.0000,  ..., -3.0763,  0.0000, -0.7733],
         [ 0.7138,  0.0000,  0.0000,  ...,  0.0000, -2.0254, -1.8851]],
        ...,
        [[-1.7525,  0.9413, -1.0677,  ..., -0.9675,  0.0000, -1.1403],
         [-4.9721, -0.6650, -3.3600,  ..., -3.3392, -1.7249,  0.0000],
         [-3.0237,  0.0000,  0.7144,  ...,  0.0000,  0.4552,  0.9397],
         [ 0.0000, -3.1401, -3.9425,  ..., -1.6147, -0.0191, -2.4391]],
        [[-4.5471,  0.0000, -5.2531,  ...,  0.0000, -4.7358, -2.0733],
         [ 0.0000, -5.3691, -4.3818,  ..., -2.3098, -5.8956,  0.0793],
         [-3.4795, -4.6900, -4.5332,  ..., -3.3885, -2.6431,  0.0000],
         [-2.2877, -5.4359, -3.1449,  ..., -2.3303, -4.3502,  0.0000]],
        [[-3.1190, -7.2002, -3.5108,  ..., -5.5058, -4.7045,  0.0000],
         [-3.2176, -5.4342, -3.1494,  ..., -4.6473, -2.8472, -2.2469],
         [-0.9264, -3.5283, -1.7571,  ..., -3.4705, -3.7765, -1.7455],
         [-3.4971, -3.3932,  0.0000,  ..., -2.6454, -4.5979, -0.4991]]],
       device='cuda:0', grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.4218, 0.9361]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.7640, 0.5675]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.4036, 0.7255]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.7461, 0.3322]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.7019, 0.5818]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.4931, 0.6114]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.7526, 0.3744]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.5808, 0.6464]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.4141, 0.5882]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.3301, 0.4405]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0142, -0.0014,  0.0161,  ...,  0.0170, -0.0183,  0.0213],
        [-0.0027, -0.0123,  0.0020,  ..., -0.0125, -0.0180, -0.0152]],
       device='cuda:0', requires_grad=True)
Epoch 0:  93%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎        | 13/14 [00:54<00:04,  4.21s/it, loss=0.69, v_num=52]1  torch.Size([10, 4, 3, 224, 224])
0 torch.Size([10, 4, 3, 224, 224])
4  torch.Size([40, 1280])
6  torch.Size([40, 1])
7  torch.Size([1, 40])
7  torch.Size([1, 40])
8  torch.Size([10, 4])
9 tensor([[[-4.5280e+00, -2.4100e+00,  0.0000e+00,  ...,  0.0000e+00,
          -6.4578e+00,  0.0000e+00],
         [ 0.0000e+00,  0.0000e+00, -3.2343e+00,  ..., -6.1301e+00,
          -5.1904e+00,  0.0000e+00],
         [-5.1565e+00, -6.6021e-01, -3.4730e+00,  ..., -6.5668e+00,
          -5.1508e+00, -2.9647e+00],
         [ 0.0000e+00, -4.9659e+00, -3.4126e+00,  ...,  0.0000e+00,
          -6.4107e+00, -2.0059e+00]],
        [[-5.1660e+00,  0.0000e+00, -1.4207e+00,  ..., -5.0010e+00,
           0.0000e+00,  0.0000e+00],
         [-4.7389e+00, -4.4929e+00,  0.0000e+00,  ..., -3.4971e+00,
          -3.0783e+00,  0.0000e+00],
         [ 0.0000e+00, -6.0418e+00, -1.9341e+00,  ..., -4.6812e+00,
          -5.0324e+00, -2.1736e+00],
         [-5.3282e+00, -7.5002e+00, -5.0722e+00,  ...,  0.0000e+00,
           0.0000e+00, -3.1061e+00]],
        [[-1.7565e+00,  0.0000e+00,  0.0000e+00,  ..., -2.6439e+00,
           0.0000e+00,  0.0000e+00],
         [-2.5049e+00,  0.0000e+00, -3.8595e+00,  ..., -4.6911e+00,
          -8.1424e-01,  0.0000e+00],
         [-1.8003e+00, -2.1660e+00, -7.6006e-01,  ..., -5.4229e+00,
          -2.7099e+00, -4.4597e-02],
         [ 0.0000e+00, -1.6792e+00,  0.0000e+00,  ..., -4.3288e+00,
          -1.6339e+00, -4.2987e-01]],
        ...,
        [[ 0.0000e+00,  0.0000e+00,  2.4444e-01,  ..., -1.7452e+00,
          -1.4658e-03,  0.0000e+00],
         [ 7.9331e-01, -3.0879e+00, -2.7179e+00,  ..., -2.7206e+00,
          -3.5466e-01, -6.3992e-01],
         [-1.2408e+00, -4.1618e+00, -1.2660e+00,  ..., -3.5291e+00,
          -6.2387e-01,  1.8965e-01],
         [-4.5354e-01, -1.7672e+00, -2.4971e+00,  ...,  4.0965e-01,
           6.1500e-01, -1.3655e+00]],
        [[-3.2873e+00, -7.6380e-01,  0.0000e+00,  ..., -2.4669e+00,
          -4.3364e+00, -3.4762e+00],
         [-3.6291e+00, -3.4307e+00, -6.7140e+00,  ..., -2.7357e+00,
          -5.5647e+00,  0.0000e+00],
         [-7.1249e-01,  0.0000e+00, -5.0241e+00,  ..., -3.5575e+00,
          -5.6487e+00, -4.1484e+00],
         [ 0.0000e+00, -9.7286e-02,  0.0000e+00,  ...,  0.0000e+00,
          -4.4479e+00, -3.5587e+00]],
        [[-2.6420e+00,  0.0000e+00, -9.4388e-01,  ..., -3.1887e-02,
           0.0000e+00,  0.0000e+00],
         [ 0.0000e+00, -2.5600e+00,  0.0000e+00,  ..., -1.8247e-01,
          -1.1615e+00, -7.3894e-01],
         [ 0.0000e+00, -1.9277e+00, -3.0399e+00,  ..., -2.2137e+00,
          -1.0859e+00, -1.3324e+00],
         [-2.6318e+00, -3.1596e+00,  0.0000e+00,  ..., -2.9753e+00,
           0.0000e+00,  0.0000e+00]]], device='cuda:0',
       grad_fn=<ReshapeAliasBackward0>) torch.Size([10, 4, 1280])
10  0 torch.Size([1, 1280])
11  tensor([[0.2918, 0.6843]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  1 torch.Size([1, 1280])
11  tensor([[0.5983, 0.3982]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  2 torch.Size([1, 1280])
11  tensor([[0.4931, 0.8487]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  3 torch.Size([1, 1280])
11  tensor([[0.7774, 0.0661]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  4 torch.Size([1, 1280])
11  tensor([[0.3692, 0.3577]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  5 torch.Size([1, 1280])
11  tensor([[0.4967, 0.6238]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  6 torch.Size([1, 1280])
11  tensor([[0.6418, 0.6267]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  7 torch.Size([1, 1280])
11  tensor([[0.5728, 0.1628]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  8 torch.Size([1, 1280])
11  tensor([[0.4238, 0.3974]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
10  9 torch.Size([1, 1280])
11  tensor([[0.4575, 0.2064]], device='cuda:0', grad_fn=<SigmoidBackward0>) torch.Size([1, 2])
Layer 0 weights Parameter containing:
tensor([[ 0.0142, -0.0014,  0.0162,  ...,  0.0170, -0.0183,  0.0213],
        [-0.0028, -0.0123,  0.0020,  ..., -0.0125, -0.0179, -0.0152]],
       device='cuda:0', requires_grad=True)
Epoch 0: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 14/14 [00:55<00:00,  3.93s/it, loss=0.687, v_num=52]
`Trainer.fit` stopped: `max_epochs=1` reached.
Next Fold......
----------------------------------------------
----------------------------------------------
-------------------------------------------------
Mean over all Folds Last
-------------------------------------------------